{"version":3,"sources":["components/LogEvents.tsx","components/OnLoad.tsx","components/ViewAmountVodka.tsx","components/WithdrawVODKAtoken.tsx","components/WithdrawEmergencyVodka.tsx","images/slavswap.png","pages/SlavSwap.tsx","images/roseswap.png","pages/Home.tsx","components/ViewAmountRoseToken.tsx","components/WithdrawRoseToken.tsx","components/WithdrawEmergency.tsx","components/Withdrawfromgarden.tsx","pages/RoseSwap.tsx","components/main.tsx","App.tsx","reportWebVitals.ts","components/web3.tsx","index.tsx"],"names":["LogEvents","str","a","args","logstr","toString","document","getElementById","innerHTML","getCurrentAccount","window","web3","eth","getAccounts","accounts","OnLoad","account","Web3","version","ViewAmountVodka","POOL","querySelector","valueOf","contractSlav","methods","pendingVodka","value","call","from","catch","error","console","log","Amount","WithdrawVODKAtoken","AmoutLPtoWithdraw","contractRose","withdraw","send","alert","WithdrawEmergencyVodka","emergencyWithdraw","SlavSwap","performance","navigation","type","className","to","src","slavswap","id","htmlFor","name","onClick","placeholder","Home","roseswap","ViewAmountRoseToken","pendingCake","pools","WithdrawRoseToken","WithdrawEmergency","Withdrawfromgarden","GardenAmount","leaveStaking","RoseSwap","Main","exact","path","component","Router","require","HashRouter","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","startWeb3","ethereum","enable","loadContract","Abi","Address","Contract","LoadWeb3","abi","ReactDOM","render"],"mappings":"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","file":"static/js/main.e71b6ecd.chunk.js","sourcesContent":["export const LogEvents = async (str: string, ...args: any) => {\r\n    var logstr = args.toString();\r\n    document.getElementById(\"log\")!.innerHTML += str + \" \" + logstr + \"\\n\";\r\n};\r\n","import Web3 from \"web3\";\r\nimport { LogEvents } from \"./LogEvents\"\r\n\r\nconst getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const OnLoad = async () => {\r\n    const account = await getCurrentAccount();\r\n    LogEvents(`web3 is present: ${Web3.version}`);\r\n    LogEvents(`Current connected account: ${account}`);\r\n};","const getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const ViewAmountVodka = async () => {\r\n    const account = await getCurrentAccount();\r\n    var POOL: any = (document.querySelector(\"#POOL2\")! as HTMLInputElement).valueOf() \r\n    var Amount = await window.contractSlav.methods.pendingVodka(POOL.value, account).call({from: account}).catch((error: any) => {\r\n        console.log(error)\r\n    });\r\n    console.log(Amount)\r\n    document.querySelector('#Dinfo2')!.innerHTML = (Amount/1E18).toString();\r\n};","import { LogEvents } from \"./LogEvents\"\r\n\r\nconst getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const WithdrawVODKAtoken = async () => {\r\n    const account = await getCurrentAccount();\r\n    var POOL: any = (document.querySelector(\"#POOL2\")! as HTMLInputElement).valueOf() \r\n    var AmoutLPtoWithdraw: any = (document.querySelector(\"#AmountLP2\")! as HTMLInputElement).valueOf(); \r\n    try{\r\n        await window.contractRose.methods.withdraw(POOL.value, AmoutLPtoWithdraw.value).send({from: account}).catch((error: any) =>{\r\n            alert('Please accept the transaction if you want to withdraw!')\r\n        });\r\n        LogEvents(`Withdrawing: ${AmoutLPtoWithdraw.value} VODKA from pool ${POOL.value}`); \r\n    }\r\n    catch(e){\r\n        alert(\"Please enter the number of unharvested VODKA tokens to withdraw!\")\r\n    }  \r\n};","import { LogEvents } from \"./LogEvents\"\r\n\r\nconst getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const WithdrawEmergencyVodka = async () => {\r\n    const account = await getCurrentAccount();\r\n    var POOL: any = (document.querySelector(\"#POOL2\")! as HTMLInputElement).valueOf() \r\n    try{\r\n        await window.contractSlav.methods.emergencyWithdraw(POOL.value).send({from: account});\r\n    LogEvents(`Withdrawing: max LP without rewards`); \r\n    }\r\n    catch(e){\r\n        alert(\"Please accept the transaction if you want to withdraw your LP!\")\r\n    }\r\n};","export default __webpack_public_path__ + \"static/media/slavswap.61cf5c3d.png\";","import { OnLoad } from \"../components/OnLoad\";\r\nimport { ViewAmountVodka } from \"../components/ViewAmountVodka\"\r\nimport { WithdrawVODKAtoken } from \"../components/WithdrawVODKAtoken\"\r\nimport { WithdrawEmergencyVodka } from \"../components/WithdrawEmergencyVodka\"\r\nimport { Link } from \"react-router-dom\";\r\nimport slavswap from \"../images/slavswap.png\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n      ethereum: any;\r\n      web3: any;\r\n      contractSlav: any;\r\n      this: any;\r\n    }\r\n}\r\n\r\nexport const SlavSwap = () => {\r\n\r\n    if (window.performance.navigation.type == 1) {\r\n        OnLoad();\r\n        } else {\r\n        }\r\n\r\n    return (\r\n        <body >\r\n        <main>\r\n        <div className=\"header\">  \r\n            <header>  \r\n                \r\n                <Link to=\"/RoseSwap\">\r\n                    <button>\r\n                        Rose Swap\r\n                    </button>\r\n                </Link>\r\n            </header>\r\n        </div>\r\n        <div className=\"section\">\r\n            <img src={slavswap} id=\"slavswap\"/>\r\n            <p></p>\r\n            <section>\r\n                <h2>Technical Stats</h2>\r\n                <pre id=\"log\"></pre>\r\n                <br/>\r\n                <hr/>\r\n                <h2>Liquidity Pools</h2>\r\n                <br/>\r\n                <label htmlFor=\"POOL2\">Choose your liquidity pool to withdraw from:</label>\r\n                <select name=\"POOL2\" id=\"POOL2\">\r\n                <option value=\"0\">1 </option> \r\n                <option value=\"1\">2 </option>\r\n                <option value=\"2\">3 </option>\r\n                <option value=\"3\">4 </option>\r\n                <option value=\"4\">5 </option>\r\n                <option value=\"5\">6 </option>\r\n                <option value=\"6\">7 </option>\r\n                <option value=\"7\">8 </option>\r\n                <option value=\"8\">9 </option>\r\n                <option value=\"9\">10 </option>\r\n                <option value=\"10\">11 </option>\r\n                <option value=\"11\">12 </option>\r\n                <option value=\"12\">13 </option>\r\n                <option value=\"13\">14 </option>\r\n                <option value=\"14\">15 </option>\r\n                <option value=\"15\">16 </option>\r\n                <option value=\"16\">17 </option>\r\n                <option value=\"17\">18 </option>\r\n                <option value=\"18\">19 </option>\r\n                <option value=\"19\">20 </option>\r\n                <option value=\"20\">21 </option>\r\n                <option value=\"21\">22 </option>\r\n                <option value=\"22\">23 </option>\r\n                <option value=\"23\">24 </option>\r\n                </select> \r\n                <br/>\r\n                <br/>\r\n                <p>\r\n                    Step 1: Check your unharvested VODKA balance:\r\n                    <br/>\r\n                    <button onClick={() => ViewAmountVodka()} id=\"getAmount2\">Get amount of unharvested VODKA tokens</button>\r\n                    <p id=\"Dinfo2\"></p>\r\n                </p>\r\n                <br/>\r\n                <p>\r\n                    Step 2: Enter amount of unharvested VODKA to withdraw form selected LP pool\r\n                    <br/>\r\n                    <input type=\"text\" name=\"AmountLP2\" id=\"AmountLP2\" placeholder=\"Unharvested VODKA\" />\r\n                    <button onClick={() => WithdrawVODKAtoken()} id=\"WithdrawLPtokens2\">Withdraw unharvested VODKA tokens</button>\r\n                </p>\r\n                <br/>\r\n                <p>\r\n                    Step 3: Withdraw all your LP tokens from the selected LP pool! (All unharvested VODKA will be lost!)\r\n                    <br/>\r\n                    <button onClick={() => WithdrawEmergencyVodka()} id=\"WithdrawStakedVodka\">Withdraw LP tokens</button>\r\n                </p>\r\n                <br/>    \r\n            </section>\r\n        </div>   \r\n        </main>\r\n        </body>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/roseswap.ef08b96e.png\";","import { Link } from \"react-router-dom\";\r\nimport slavswap from \"../images/slavswap.png\";\r\nimport roseswap from \"../images/roseswap.png\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n      ethereum: any;\r\n      web3: any;\r\n      contract: any;\r\n    }\r\n}\r\n\r\nexport const Home = () => {\r\n    \r\n\r\n    return (\r\n      <main className=\"App\"> \r\n        <div>\r\n            <div id=\"images\">\r\n                <img src={roseswap} className=\"fblogo\"/>\r\n                <img src={slavswap} className=\"fblogo\"/>\r\n                <br/>\r\n                <Link to=\"/RoseSwap\">\r\n                        <button className=\"but1\">\r\n                            RoseSwap\r\n                        </button>\r\n                </Link>\r\n                <Link to=\"/SlavSwap\">\r\n                        <button className=\"but1\">\r\n                            SlavSwap\r\n                        </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n      </main>\r\n    )\r\n}","const getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const ViewAmountRoseToken = async () => {\r\n    const account = await getCurrentAccount();\r\n    var POOL: any = (document.querySelector(\"#POOL\")! as HTMLInputElement).valueOf() \r\n    var Amount = await window.contractRose.methods.pendingCake(POOL.value, account).call({from: account}).catch((error: any) => {\r\n        console.log(error)\r\n    });\r\n    document.querySelector('#Dinfo')!.innerHTML = (Amount/1E18).toString();\r\n};","import { LogEvents } from \"./LogEvents\"\r\n\r\nconst getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\nconst pools =['ROSE', 'ROSE/BNB', 'ROSE/BUSD', 'BUSD/BNB?'];\r\n\r\nexport const WithdrawRoseToken = async () => {\r\n    const account = await getCurrentAccount();\r\n    var POOL: any = (document.querySelector(\"#POOL\")! as HTMLInputElement).valueOf() \r\n    var AmoutLPtoWithdraw: any = (document.querySelector(\"#AmountLP\")! as HTMLInputElement).valueOf(); \r\n    try{\r\n        await window.contractRose.methods.withdraw(POOL.value, AmoutLPtoWithdraw.value).send({from: account}).catch((error: any) =>{\r\n            alert('Please accept the transaction if you want to withdraw!')\r\n        });\r\n        LogEvents(`Withdrawing: ${AmoutLPtoWithdraw.value} ROSE from pool ${pools[POOL.value]}`); \r\n    }\r\n    catch(e){\r\n        alert(\"Please enter the number of unharvested ROSE tokens to withdraw!\")\r\n    }  \r\n};","import { LogEvents } from \"./LogEvents\"\r\n\r\nconst getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const WithdrawEmergency = async () => {\r\n    const account = await getCurrentAccount();\r\n    var POOL: any = (document.querySelector(\"#POOL\")! as HTMLInputElement).valueOf() \r\n    try{\r\n        await window.contractRose.methods.emergencyWithdraw(POOL.value).send({from: account});\r\n    LogEvents(`Withdrawing: max LP without rewards`); \r\n    }\r\n    catch(e){\r\n        alert(\"Please accept the transaction if you want to withdraw your LP!\")\r\n    }\r\n};","import { LogEvents } from \"./LogEvents\"\r\n\r\nconst getCurrentAccount = async () => {\r\n    const accounts = await window.web3.eth.getAccounts();\r\n    return accounts[0];\r\n}\r\n\r\nexport const Withdrawfromgarden = async () => {\r\n    const account = await getCurrentAccount();\r\n    var GardenAmount: any = (document.querySelector(\"#Garden\")! as HTMLInputElement).valueOf() \r\n    try{\r\n        await window.contractRose.methods.leaveStaking(GardenAmount.value).send({from: account});\r\n        LogEvents(`Withdrawing: ${GardenAmount.value} ROSE from gardens`); \r\n    }\r\n    catch(e){\r\n        alert(\"Please enter the number of staked ROSE to withdraw!\")\r\n    }\r\n};","import { OnLoad } from \"../components/OnLoad\";\r\nimport { ViewAmountRoseToken } from \"../components/ViewAmountRoseToken\"\r\nimport { WithdrawRoseToken } from \"../components/WithdrawRoseToken\"\r\nimport { WithdrawEmergency } from \"../components/WithdrawEmergency\"\r\nimport { Withdrawfromgarden } from \"../components/Withdrawfromgarden\"\r\nimport { Link } from \"react-router-dom\";\r\nimport roseswap from \"../images/roseswap.png\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n      ethereum: any;\r\n      web3: any;\r\n      contractRose: any;\r\n      this: any;\r\n    }\r\n}\r\n\r\n\r\nexport const RoseSwap = () => {\r\n\r\n    if (window.performance.navigation.type == 1) {\r\n        OnLoad();\r\n        } else {\r\n        }\r\n\r\n    return (\r\n        <body>\r\n        <main>\r\n        <div className=\"page-container about\">\r\n            <div className=\"header\">  \r\n                <header>  \r\n                    \r\n                    <Link to=\"/SlavSwap\">\r\n                        <button>\r\n                            Slav Swap\r\n                        </button>\r\n                    </Link>\r\n                </header>\r\n            </div>\r\n            <div className=\"section\">\r\n                <img src={roseswap} id=\"roseswap\"/>\r\n                <p></p>\r\n                <section>\r\n                    <h2>Technical Stats</h2>\r\n                    <pre id=\"log\"></pre>\r\n                    <br/>\r\n                    <hr/>\r\n                    <h2>Liquidity Pools</h2>\r\n                    <br/>\r\n                    <label htmlFor=\"POOL\">Choose your liquidity pool to withdraw from:</label>\r\n                    <select name=\"POOL\" id=\"POOL\">\r\n                    <option value=\"0\">ROSE </option> \r\n                    <option value=\"1\">ROSE/BNB </option>\r\n                    <option value=\"2\">ROSE/BUSD</option>\r\n                    <option value=\"3\">BUSD/BNB?</option>\r\n                    </select> \r\n                    <br/>\r\n                    <br/>\r\n                    <p>\r\n                        Step 1: Check your unharvested ROSE balance:\r\n                        <br/>\r\n                        <button onClick={() => ViewAmountRoseToken()} id=\"getAmount\">Get amount of unharvested ROSE tokens</button>\r\n                        <p id=\"Dinfo\"></p>\r\n                    </p>\r\n                    <br/>\r\n                    <p>\r\n                        Step 2: Enter amount of unharvested ROSE to withdraw form selected LP pool\r\n                        <br/>\r\n                        <input type=\"text\" name=\"AmountLP\" id=\"AmountLP\" placeholder=\"Unharvested ROSE\" />\r\n                        <button onClick={() => WithdrawRoseToken()} id=\"WithdrawLPtokens\">Withdraw unharvested ROSE tokens</button>\r\n                    </p>\r\n                    <br/>\r\n                    <p>\r\n                        Step 3: Withdraw all your LP tokens from the selected LP pool! (All unharvested ROSE will be lost!)\r\n                        <br/>\r\n                        <button onClick={() => WithdrawEmergency()} id=\"WithdrawStakedRose\">Withdraw LP tokens</button>\r\n                    </p>\r\n                    <br/>    \r\n                    <hr/>\r\n                    <h2>Gardens</h2>\r\n                    <p>\r\n                        Step 1: Enter amount of staked ROSE to withdraw from the gardens\r\n                        <br/>\r\n                        <input type=\"text\" name=\"Garden\" id=\"Garden\" placeholder=\"Staked ROSE\" />\r\n                        <button onClick={() => Withdrawfromgarden()} id=\"WithdrawStakedRose\">Withdraw ROSE from staking</button>\r\n                    </p>\r\n                    <br/>\r\n                </section>\r\n            </div>   \r\n        </div>\r\n        </main>\r\n        </body>\r\n    )\r\n}","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { SlavSwap } from '../pages/SlavSwap';\r\nimport { Home } from '../pages/Home';\r\nimport { RoseSwap } from '../pages/RoseSwap';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\r\n      <Route exact path='/' component={Home}></Route>\r\n      <Route exact path='/RoseSwap' component={RoseSwap}></Route>\r\n      <Route exact path='/SlavSwap' component={SlavSwap}></Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from \"react\";\nimport Main from \"./components/main\"\n\nconst Router = require(\"react-router-dom\").HashRouter;\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"Container\">\n        <Main/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Web3 from \"web3\";\r\nimport contractRose from \"../contractdata/RoseswapAbi.json\";\r\nimport contractSlav from \"../contractdata/SlavSwapAbi.json\";\r\n\r\nconst contractAddressRoseSwap = '0x5059acdCe47C783442a353fcD2a7D226155f0135'; \r\nconst contractAddressSlavSwap = '0x9eBbCD5B4b0B3fd43212e8D7C3aC5c041200B45a'; \r\n\r\nconst startWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum);\r\n    window.ethereum.enable();\r\n  } else {\r\n    window.alert(\"Metamask not detected!\");\r\n  }\r\n};\r\n\r\nconst loadContract = async (Abi: any, Address: any) => {\r\n  return await new window.web3.eth.Contract(Abi, Address);\r\n};\r\n\r\nexport const LoadWeb3 = async () => {\r\n  await startWeb3();\r\n  window.contractSlav = await loadContract(contractSlav.abi, contractAddressSlavSwap);\r\n  window.contractRose = await loadContract(contractRose.abi, contractAddressRoseSwap);\r\n};","import ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { LoadWeb3 } from './components/web3';\nimport { BrowserRouter } from 'react-router-dom';\nimport \"./assets/styles.scss\";\n\nLoadWeb3();\n\nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}